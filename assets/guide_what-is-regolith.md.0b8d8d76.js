import{_ as e}from"./chunks/project_folder.ffe44ce8.js";import{_ as t,c as o,o as i,a as n}from"./app.7ea332e9.js";const y=JSON.parse('{"title":"What is Regolith?","description":"","frontmatter":{"title":"What is Regolith?"},"headers":[{"level":2,"title":"Compiling","slug":"compiling","link":"#compiling","children":[]},{"level":2,"title":"Filters","slug":"filters","link":"#filters","children":[{"level":3,"title":"Creating your own Filters","slug":"creating-your-own-filters","link":"#creating-your-own-filters","children":[]}]},{"level":2,"title":"Why Regolith?","slug":"why-regolith","link":"#why-regolith","children":[{"level":3,"title":"Extending the Addon Syntax","slug":"extending-the-addon-syntax","link":"#extending-the-addon-syntax","children":[]},{"level":3,"title":"Non-Destructive Editing","slug":"non-destructive-editing","link":"#non-destructive-editing","children":[]}]}],"relativePath":"guide/what-is-regolith.md","lastUpdated":1733061493000}'),a={name:"guide/what-is-regolith.md"},r=n('<h1 id="what-is-regolith" tabindex="-1">What is Regolith? <a class="header-anchor" href="#what-is-regolith" aria-hidden="true">#</a></h1><p>Regolith is an Addon Compiler for the Bedrock Edition of Minecraft.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This page introduces Regolith at a conceptual level. If you prefer, you can jump to the <a href="/regolith/guide/installing">installation instructions</a>.</p></div><p>Regolith introduces the concept of a &quot;project folder&quot;, where your addons are written, including the Resource Pack, Behavior Pack, and any models, textures or configuration files. This single-folder-structure is great for version control, and allows you to keep your &quot;source-of-truth&quot; outside of com.mojang!</p><p>Here is what a newly initialized Regolith project looks like:</p><p><img src="'+e+`" alt=""></p><h2 id="compiling" tabindex="-1">Compiling <a class="header-anchor" href="#compiling" aria-hidden="true">#</a></h2><p>In the simplest case, Regolith can be used to move your packs from the project folder, into your target location (usually the development folders in <code>com.mojang</code>). Each time you run regolith, the packs will be moved over, and updated.</p><p>However, Regoliths real value preposition is the ability to run <em>arbitrary code during this copy</em>.</p><p>We refer to these scripts and programs as <code>filters</code>. Here is the flow:</p><ul><li><code>RP</code>, <code>BP</code> and <code>data</code> folder are copied into a <code>tmp</code> folder</li><li>Every filter is executed in-order, editing the <code>tmp</code> folder in-place</li><li>The contents of <code>RP</code> and <code>BP</code> are moved into your export location</li><li>If configured, subfolders within <code>data</code> can be moved back into your data location</li></ul><p>This compilation flow allows you to make programmatic changes to your compiled addon, without effecting your source files.</p><p>Since the data folder can be saved back to your project, it&#39;s possible to store persistant data there.</p><h2 id="filters" tabindex="-1">Filters <a class="header-anchor" href="#filters" aria-hidden="true">#</a></h2><p>A filter is any program or script that takes the files inside of your RP and BP and <em>transforms</em> them in some way. Many of these filters have already been written, and are included as part of the <a href="/regolith/standard-library">standard library</a>.</p><p>For example, one of our standard filters is called <code>texture_convert</code>, which <em>filters</em> image formats for photo editing programs, and converts them into <code>.png</code> files.</p><p>With this filter turned on, you can place Photoshop, Krita, or Gimp files directly into <code>RP/textures/*</code> folder! By the time your files reach <code>com.mojang</code>, the <code>.psd</code> files will be replaced by a normal <code>.png</code> -Minecraft won&#39;t know the difference!</p><h3 id="creating-your-own-filters" tabindex="-1">Creating your own Filters <a class="header-anchor" href="#creating-your-own-filters" aria-hidden="true">#</a></h3><p>You can write filters in Python, JavaScript, Java, or any other language, using our shell integration. You can learn more about creating custom filters <a href="/regolith/guide/custom-filters">here</a>.</p><h2 id="why-regolith" tabindex="-1">Why Regolith? <a class="header-anchor" href="#why-regolith" aria-hidden="true">#</a></h2><h3 id="extending-the-addon-syntax" tabindex="-1">Extending the Addon Syntax <a class="header-anchor" href="#extending-the-addon-syntax" aria-hidden="true">#</a></h3><p>Regolith allows you to create and extend addon-syntax. As long as you can write a filter to interpret the new syntax, and compile it into valid addon-syntax, then anything goes!</p><p>For example, the <a href="https://github.com/Nusiq/regolith-filters/tree/master/subfunctions" target="_blank" rel="noreferrer">subfunctions</a> community filter allows you to define functions within functions, without creating an additional file:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"># Some code</span></span>
<span class="line"><span style="color:#A6ACCD;">function &lt;aaa&gt;:</span></span>
<span class="line"><span style="color:#A6ACCD;">    # The code of the subfunction</span></span>
<span class="line"><span style="color:#A6ACCD;">    execute @a ~ ~ ~ function &lt;bbb&gt;:</span></span>
<span class="line"><span style="color:#A6ACCD;">        # The code of the nested subfunction</span></span>
<span class="line"><span style="color:#A6ACCD;"># Some other code</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>With Regolith, you are empowered to write addons with an extended syntax - and Bedrock won&#39;t even know the difference!</p><h3 id="non-destructive-editing" tabindex="-1">Non-Destructive Editing <a class="header-anchor" href="#non-destructive-editing" aria-hidden="true">#</a></h3><p>Imagine you have a script that loops over every entity, and creates some language-code translation for it.</p><p>Lets say your entity <code>regolith:big_zombie</code> becomes named <code>Big Zombie</code>.</p><p>If you run this script, and copy the files into your <code>en_US.lang</code>, you&#39;ve saved yourself a lot of time, but you&#39;ve also introduced a problem: You&#39;ve <em>destructively edited your addon</em>. What this means, is that you have mixed up your tool-generated content, with your hand-written content.</p><p>Imagine you add more entities, and run your script again: Now you are in the painful position of &quot;merging&quot; the new tool generated content, with your addons <code>en_US.lang</code> file, which you may have edited in the interim.</p><p>This is called <em>destructive editing</em>, and Regolith fixes it!</p><p>A comparable Regolith filter would not suffer from this problem, because you never directly edit tool generated content. Your Regolith project folder contains only human written content, and your <code>com.mojang</code> folder contains only tool-generated content.</p><p>This means as you add new entities, the names will be handled for you, without you ever seeing the names in <code>en_US.lang</code>, or needing to re-run the script!</p><p>In other words, Regolith adds compiled content on top of your hand written content, leaving you free to create your content, without working around tool-generated content.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If this sounds interesting to you, you might be interested in the <a href="https://github.com/Bedrock-OSS/regolith-filters/tree/master/name_ninja" target="_blank" rel="noreferrer">name ninja filter</a>.</p></div>`,35),s=[r];function l(d,c,h,p,u,g){return i(),o("div",null,s)}const w=t(a,[["render",l]]);export{y as __pageData,w as default};
