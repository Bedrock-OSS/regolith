import{_ as e,c as o,o as t,a}from"./app.d32a1d89.js";const m=JSON.parse('{"title":"Filter Run Modes","description":"","frontmatter":{"title":"Filter Run Modes"},"headers":[{"level":2,"title":"Run and Watch Commands","slug":"run-and-watch-commands","link":"#run-and-watch-commands","children":[]},{"level":2,"title":"Apply-Filter Command - Running Regolith Destructively","slug":"apply-filter-command-running-regolith-destructively","link":"#apply-filter-command-running-regolith-destructively","children":[]}],"relativePath":"guide/filter-run-modes.md","lastUpdated":1670091267000}'),n={name:"guide/filter-run-modes.md"},i=a(`<h1 id="filter-run-modes" tabindex="-1">Filter Run Modes <a class="header-anchor" href="#filter-run-modes" aria-hidden="true">#</a></h1><p>There are 3 ways of running Regolith:</p><ul><li><code>regolith run</code></li><li><code>regolith watch</code></li><li><code>regolith apply-filter</code></li></ul><h2 id="run-and-watch-commands" tabindex="-1">Run and Watch Commands <a class="header-anchor" href="#run-and-watch-commands" aria-hidden="true">#</a></h2><p>Regolith <code>run</code> and <code>watch</code> are very similar to each other. They run a profile. The difference is that the <code>watch</code> command will watch for changes in the RP, BP and <a href="/regolith/guide/data-folder">data</a> folders and rerun the profile when they change. The <code>run</code> command will run the profile only once.</p><p>The syntax for run and watch command is:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">regolith run [profile-name]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">regolith watch [profile-name]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Where <code>[profile-name]</code> is the name of the profile defined your &quot;config.json&quot; file you want to run. The <code>[profile-name]</code> is optional. If you don&#39;t specify it, the <code>&quot;default&quot;</code> profile will be run.</p><p>A single run performs the following steps:</p><ol><li>Copy your source files into a temporary folder.</li><li>Runs all of the filters of the profile.</li><li>Moves the files to the target location defined in the &quot;export&quot; property of the profile.</li></ol><p>Filters work on the copies of RP, BP, and data. Thanks to the use of copies, RP and BP cannot be modified by the filters. The data folder can be modified because after a successful run Regolith moves the files of the copy to the the original data folder (this is useful for the filters so that they can store some data between runs).</p><h2 id="apply-filter-command-running-regolith-destructively" tabindex="-1">Apply-Filter Command - Running Regolith Destructively <a class="header-anchor" href="#apply-filter-command-running-regolith-destructively" aria-hidden="true">#</a></h2><p>Running Regolith with <code>regolith run</code> or <code>regolith watch</code> is a safe operation because the filters can only modify the data folder but not RP and BP. Sometimes you want to modify the RP and BP directly in a destructive way. This is where the apply-filter command come in handy. You can apply any filter by running the <code>regolith apply-filter</code> command. Unlike the <code>regolith run</code> command, the <code>regolith apply-filter</code> command runs only one filter instead of running entire profile.</p><p>The command is used like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">regolith apply-filter &lt;filter-name&gt; [args...]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>The <code>filter-name</code> is the name of one of the filters installed in your project. The <code>args</code> is a list of arguments passed to the filter.</p>`,17),l=[i];function s(r,d,c,h,p,u){return t(),o("div",null,l)}const g=e(n,[["render",s]]);export{m as __pageData,g as default};
