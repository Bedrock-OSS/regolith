import{_ as s,c as a,o as n,a as l}from"./app.d32a1d89.js";const d=JSON.parse('{"title":"Shell Filters","description":"","frontmatter":{"title":"Shell Filters"},"headers":[{"level":2,"title":"Running arbitrary Shell command as Filter","slug":"running-arbitrary-shell-command-as-filter","link":"#running-arbitrary-shell-command-as-filter","children":[]}],"relativePath":"guide/shell-filters.md","lastUpdated":1670099372000}'),e={name:"guide/shell-filters.md"},o=l(`<h1 id="shell-filters" tabindex="-1">Shell Filters <a class="header-anchor" href="#shell-filters" aria-hidden="true">#</a></h1><p>Shell Filters allow you to run arbitrary shell commands. This is useful for running scripts that are not natively supported in Regolith.</p><h2 id="running-arbitrary-shell-command-as-filter" tabindex="-1">Running arbitrary Shell command as Filter <a class="header-anchor" href="#running-arbitrary-shell-command-as-filter" aria-hidden="true">#</a></h2><p>The syntax for running a shell script is this:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">runWith</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shell</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">command</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">echo &#39;hello world&#39;</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Here is another example:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">runWith</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shell</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">command</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">python -u ./filters/my_filter.py</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,7),t=[o];function p(r,c,i,D,y,F){return n(),a("div",null,t)}const u=s(e,[["render",p]]);export{d as __pageData,u as default};
