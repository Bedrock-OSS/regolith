import{_ as e,c as n,o as s,a}from"./app.806e251a.js";const D=JSON.parse('{"title":"Nim Filters","description":"","frontmatter":{"title":"Nim Filters"},"headers":[{"level":2,"title":"Installing Nim","slug":"installing-nim","link":"#installing-nim","children":[]},{"level":2,"title":"Running Nim code as Filter","slug":"running-nim-code-as-filter","link":"#running-nim-code-as-filter","children":[]},{"level":2,"title":"Requirements and Dependencies","slug":"requirements-and-dependencies","link":"#requirements-and-dependencies","children":[]}],"relativePath":"guide/nim-filters.md","lastUpdated":1668808318000}'),l={name:"guide/nim-filters.md"},t=a(`<h1 id="nim-filters" tabindex="-1">Nim Filters <a class="header-anchor" href="#nim-filters" aria-hidden="true">#</a></h1><p>Nim is a statically typed compiled systems programming language. It combines successful concepts from mature languages like Python, Ada and Modula.</p><h2 id="installing-nim" tabindex="-1">Installing Nim <a class="header-anchor" href="#installing-nim" aria-hidden="true">#</a></h2><ol><li>Download the newest version of <a href="https://nim-lang.org/install_windows.html" target="_blank" rel="noreferrer">choosenim.</a></li><li>Open a terminal in the same directory that you downloaded <code>choosenim</code>.</li><li>Run <code>choosenim --firstInstall</code></li></ol><h2 id="running-nim-code-as-filter" tabindex="-1">Running Nim code as Filter <a class="header-anchor" href="#running-nim-code-as-filter" aria-hidden="true">#</a></h2><p>The syntax for running a nim filter is this:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">runWith</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nim</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">script</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./filters/example.nim</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// Optional property that defines the path to the folder with the *.nimble file</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">requirements</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./filters</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="requirements-and-dependencies" tabindex="-1">Requirements and Dependencies <a class="header-anchor" href="#requirements-and-dependencies" aria-hidden="true">#</a></h2><p>If your filter has dependencies, put a <code>.nimble</code> file in the same directory as your <code>.nim</code> file, alternatively you can specify different path using the &quot;requirements&quot; property. Regolith will look for the nimble file in the folder specified by &quot;requirements&quot; or if it&#39;s not defined in the same folder as the script.</p><p>Documentation on how to make a <code>.nimble</code> file is located <a href="https://github.com/nim-lang/nimble#creating-packages" target="_blank" rel="noreferrer">here</a>.</p>`,10),i=[t];function o(r,p,c,d,m,h){return s(),n("div",null,i)}const y=e(l,[["render",o]]);export{D as __pageData,y as default};
